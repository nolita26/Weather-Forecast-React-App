{"ast":null,"code":"import * as React from 'react';\nimport { useState, useRef, useEffect, useContext, useMemo, useImperativeHandle } from 'react';\nimport { MountedMapsContext } from './use-map';\nimport Mapbox from '../mapbox/mapbox';\nimport createRef from '../mapbox/create-ref';\nimport useIsomorphicLayoutEffect from '../utils/use-isomorphic-layout-effect';\nimport setGlobals from '../utils/set-globals';\nexport const MapContext = React.createContext(null);\nexport default function Map(props, ref, defaultLib) {\n  const mountedMapsContext = useContext(MountedMapsContext);\n  const [mapInstance, setMapInstance] = useState(null);\n  const containerRef = useRef();\n  const {\n    current: contextValue\n  } = useRef({\n    mapLib: null,\n    map: null\n  });\n  useEffect(() => {\n    const mapLib = props.mapLib;\n    let isMounted = true;\n    let mapbox;\n    Promise.resolve(mapLib || defaultLib).then(module => {\n      if (!isMounted) {\n        return;\n      }\n      if (!module) {\n        throw new Error('Invalid mapLib');\n      }\n      const mapboxgl = 'Map' in module ? module : module.default;\n      if (!mapboxgl.Map) {\n        throw new Error('Invalid mapLib');\n      }\n      // workerUrl & workerClass may change the result of supported()\n      // https://github.com/visgl/react-map-gl/discussions/2027\n      setGlobals(mapboxgl, props);\n      if (!mapboxgl.supported || mapboxgl.supported(props)) {\n        if (props.reuseMaps) {\n          mapbox = Mapbox.reuse(props, containerRef.current);\n        }\n        if (!mapbox) {\n          mapbox = new Mapbox(mapboxgl.Map, props, containerRef.current);\n        }\n        contextValue.map = createRef(mapbox);\n        contextValue.mapLib = mapboxgl;\n        setMapInstance(mapbox);\n        mountedMapsContext === null || mountedMapsContext === void 0 ? void 0 : mountedMapsContext.onMapMount(contextValue.map, props.id);\n      } else {\n        throw new Error('Map is not supported by this browser');\n      }\n    }).catch(error => {\n      const {\n        onError\n      } = props;\n      if (onError) {\n        onError({\n          type: 'error',\n          target: null,\n          originalEvent: null,\n          error\n        });\n      } else {\n        console.error(error); // eslint-disable-line\n      }\n    });\n    return () => {\n      isMounted = false;\n      if (mapbox) {\n        mountedMapsContext === null || mountedMapsContext === void 0 ? void 0 : mountedMapsContext.onMapUnmount(props.id);\n        if (props.reuseMaps) {\n          mapbox.recycle();\n        } else {\n          mapbox.destroy();\n        }\n      }\n    };\n  }, []);\n  useIsomorphicLayoutEffect(() => {\n    if (mapInstance) {\n      mapInstance.setProps(props);\n    }\n  });\n  useImperativeHandle(ref, () => contextValue.map, [mapInstance]);\n  const style = useMemo(() => ({\n    position: 'relative',\n    width: '100%',\n    height: '100%',\n    ...props.style\n  }), [props.style]);\n  const CHILD_CONTAINER_STYLE = {\n    height: '100%'\n  };\n  return React.createElement(\"div\", {\n    id: props.id,\n    ref: containerRef,\n    style: style\n  }, mapInstance && React.createElement(MapContext.Provider, {\n    value: contextValue\n  }, React.createElement(\"div\", {\n    \"mapboxgl-children\": \"\",\n    style: CHILD_CONTAINER_STYLE\n  }, props.children)));\n}","map":null,"metadata":{},"sourceType":"module"}